# [server]
# netty bind host
server.host = 127.0.0.1
# netty bind port
server.port = 8443
# distinct id for this server
# generated from host and port if id = 0 or not specify
server.id = 0
# enable or diable ssl
server.ssl = false
#server.cert = cert.crt
#server.key = cert.key
# execute polling message task at a fixed rate
# time unit is milliseconds
server.executor.schedule_rate = 80
# enable or disable close connection
# when no message received in {server.idle.timeout} minutes
server.idle.close = true
# connection read idle timeout
# time unit is minutes
server.idle.timeout = 10
# request this path will upgrade to websocket protocol
server.websocket.path = /websocket
# static files
server.static.files = html,jpg,png,js,map
# enable or disable channel traffic shaping
server.traffic.shaping = true
# read limit in bytes
server.traffic.limit = 1024

# message service backend
message.service = kafka
# [kafka]
# kafka broker servers
kafka.servers = localhost:9092
# auto create topics if not exists
kafka.topic.create = true
# prefix pattern for topics
# when specify "chat", topic name would be "chat-1"..."chat-8"
kafka.topic.pattern = chat
# topic numbers
kafka.topic.count = 8
# topic partition numbers
kafka.topic.partition = 8
# topic replication numbers
kafka.topic.replica = 1
# consumer group id, use current time in millis if not specify
kafka.consumer.group_id = group_1
kafka.consumer.poll_timeout = 80
kafka.consumer.close_timeout = 100

# meta service backend
meta.service = redis
# [redis]
# redis cluster nodes
redis.servers = localhost:6379,localhost:6380,localhost:6381
redis.conn_timeout = 10000
redis.so_timeout = 10000
redis.max_attempt = 3
redis.max_total = 100
redis.max_idle = 5
redis.min_idle = 1
redis.max_wait = 10000
redis.key.prefix = chat
redis.key.separator = ::